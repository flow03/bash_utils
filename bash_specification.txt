## Програма порівняння файлів по назві/розміру/хешу
duplicate_bash

+ Одновимірний контейнер, в якому буде шлях до всіх файлів.
+ Для ініціалізації першого контейнера буде використана рекурсія. В ній буде задіяний метод is_directory
+ Алгоритм, який буде шукати однакові елементи за назвою файлу, або за розміром(в байтах).
+ Цей алгоритм буде додавати однакові файли у інший, двовимірний контейнер.
+ Для порівняння буде використовуватись алгоритм for_each, або range-based for. Буде передбачено пропуск елемента, з яким порівнюються інші.
Надати користувачу можливість обирати, яким чином зберігати результат роботи програми. Це може бути як одна тека, так і оремі теки для кожного набору дублікатів.
Можливість обирати, чи варто залишити один екземпляр дублюваного файлу у вихідній теці.
Врахувати випадок колізії, коли у різних векторах будуть файли з однаковими іменами, і вони не будуть перейменовані(з різним розміром, наприклад).
+/- Врахувати випадок, якщо два(або більше) імені у одному векторі не будуть однакові з ім'ям першого елемента, але будуть однакові між собою.
Тестувати вищезгаданий випадок.
+ При перейменуванні файлів, спочатку циклічно додати їм новий шлях, а потім вже порівнювати на однакові імена.
Генерувати ідентичний двовимірний контейнер з новими іменами. Це полегшить порівняння між його векторами.
Розглянути ідею зі створенням одновимірного контейнеру посилань/вказівників на елементи двовимірного контейнеру.
Створити порівняння між векторами, яке будбуватиметься лише якщо порівняння елементів відбувається не за іменами, і якщо всі результати зберігаються в одній теці.
Можливо, можна усі функції роботи з вектором оформити у вигляді класу.
+ Створити окремий об'єкт для прапорців.
+ Створити окремий об'єкт для збережених шляхів і прапорців.
+ Повертати вказівник з методу erase.
Додати можливість виводити результати порівняння в файл.
Передбачити випадок, якщо результуюча тека не буде пуста.
Рекурсивне перейменування і порівняння файлу, у випадку якщо р. тека не буде пуста.
Діалог y/n чи потрібне таке перейменування, чи краще перервати роботу програми/створити пусту теку у р. теці.
Додати можливість використовувати файл замість вхідної теки, і читати шляхи дублікатів з файлу. Передбачити перевірку(exists) наявності таких файлів у файловій системі. 
Пошукати інформацію щодо виведення абсолютного шляху.


## Програма порівння файлів в двох(або більше) теках
extra_bash, або unique_bash

Функціонал порівняння двох тек. І видалення/переміщення лишніх елементів.
Порівнюються елементи двоох контейнерів. 
Однакові елементи видаляються з обох контейнерів.
Елементи, які залишились, і є лишніми. Вони виводяться на екран і/або переміщуються у іншу теку.
Видаляючи елемент з контейнера під час проходження циклу по ньому, не забути, що поточний вказівник на елемент буде зміщено.
Не забути змістити вказівник на елемент назад.

## Програма знаходження вказаного файлу/файлів
Можна використати вже реалізовані функції для роботи з теками із duplicate_bash
Файли для знаходження вказуватимуться у параметрах, точно так само як і шлях/шляхи, для пошуку.
В програмі буде реалізована перевірка параметрів, це файл чи директорія. Таким чином буде визначатись, це файл для знаходження чи шлях для пошуку.
Подумати, що потрібно реалізовувати роботи з результатами окрім текстового виводу. Якщо так, то його теж можна запозичити.
Можна використати реалізовані ф-ї порівняння двох файлів за filename, size, stem. В майбутньому можна реалізувати 32bit і порівняння за хешем (crc32, md5). Усі ці ф-ї можна виділити у окремий файл.
