TMX_FROM_JSON (Create_from_json)

+ Програма прийматиме на вхід tmx-файл і два json-файли
+ Формуватиме з них два jsonFile об'єкти і один TMX_Merger
+ Метод об'єкту TMX_Merger прийматиме на вхід ці два об'єкти
+ Отримуватиме їх вміст за їх json-ключами. І формуватиме нові tu-сегменти
+ Якщо у tmx-файлі вже наявний сегмент з таким pl-ключем, то він буде пропускатись
+ Записуватиме у сегменти поточну 'однакову' дату. Яка буде отримана на початку виконання методу
+ Ім'я за замовчуванням буде назвою класу, але можна передати інше у параметрах

Створити додатковий метод, який дописуватиме до переданого в нього tu-сегменту переданий рядок
Наприклад '<DEEPL> ' дописуватиметься на початок перекладеного рядка uk
В кінці роботи програми буде створено окремий tmx файл з доданими в нього json-сегментами

Написання цього ТЗ зайняло ~19 хвилин

# -------------------------------------------------------------

Програма, яка оброблятиме файли, перекладені з допомогою DeepL
Замінятиме усі « » на "
Замінятиме усі “ ” на '
Можливо, також виправлятиме .... на ...
Цей метод входитиме до класу, який створюватиме txt-глосарії з json-файлів і з tmx-сегментів

# -------------------------------------------------------------
KEY_FINDER

+ Програма, яка на початку виконання завантажить усі файли локалізації у один json-об'єкт
+ І циклічно очікуватиме ввід ключа від користувача
+ Коли користувач веде q або quit, виконання програми завершиться
+ Такий json-об'єкт буде для кожної локалізації
+ Також, варто на початку перевірити чи ключі, які додаються у цей об'єкт, не повторюються

+ В перспективі, можна модернізувати попередній KEY_finder, записавши ці об'єкти у окремі файли json
+ Програма працюватиме так само, але у файлі налаштувань будуть лише ключі
Можливо, у цьому файлі будуть шляхи до потрібних файлів bin

